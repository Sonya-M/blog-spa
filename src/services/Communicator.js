import { ALL_USERS_ENDPOINT, ALL_POSTS_ENDPOINT } from "./endpoints";

import Mapper from "./Mapper";

class Communicator {

  static fetchAllPosts() {
    return (
      fetch(ALL_POSTS_ENDPOINT)
        .then((response) => {
          if (!response.ok) {
            throw new Error(`Error! Response status: ${response.status}`);
          }
          else {
            return response.json();
          }
        }).then((rawJSON) => {
          return rawJSON.map(post => Mapper.mapJsonToPost(post))
        })
    );
  }

  static fetchAllAuthors() {
    return (
      fetch(ALL_USERS_ENDPOINT)
        .then((response) => {
          if (!response.ok) {
            throw new Error(`Error! Response status: ${response.status}`);
          } else {
            return response.json();
          }
        }).then(rawJSON => {
          return rawJSON.map(user => Mapper.mapJsonToAuthor(user))
        })
    )
  }

  /**
   * Simulates generating new content
   * @param {string} post title
   * @param {string} post body
   * @param {number} author id
   * @returns Post instance with autogenerated ID
   */
  static createPost(postTitle, postBody, postAuthorID) {
    return (
      fetch(ALL_POSTS_ENDPOINT, {
        method: "POST",
        body: JSON.stringify({
          title: postTitle,
          body: postBody,
          userId: postAuthorID,
        }),
        headers: {
          "Content-type": "application/json; charset=UTF-8",
        },
      })
        .then((response) => response.json())
        .then((rawJSON) => {
          console.log(rawJSON);
          return Mapper.mapJsonToPost(rawJSON);
        })
    )
  }

  static fetchAllPostsByAuthor(authorId) {
    return (
      fetch(ALL_POSTS_ENDPOINT + "?userId=" + authorId)
        .then((response) => {
          if (!response.ok) {
            throw new Error(`Error! Response status: ${response.status}`);
          } else {
            return response.json();
          }
        })
        .then((rawJSON) => {
          return rawJSON.map(post => Mapper.mapJsonToPost(post))
        })
    );
  }

  /**
   * Fetches author data based on given id and returns an Author instance
   * @returns {Author} 
   */
  static getAuthor(authorId) {
    return (
      fetch(ALL_USERS_ENDPOINT + "/" + authorId)
        .then((response) => {
          if (!response.ok) {
            throw new Error(`Error! Response status: ${response.status}`);
          } else {
            return response.json();
          }
        })
        .then(rawJSON => Mapper.mapJsonToAuthor(rawJSON))
    );
  }

}

export default Communicator;

// Example usage:
// Communicator.fetchAllPosts();
// Communicator.fetchAllAuthors();
// Communicator.createPost();
// Comunicator.fetchAllPostsByAuthor(authorId);

// test data fetch
// Communicator.fetchAllPosts();
// Communicator.fetchAllAuthors();
// Communicator.fetchAllPostsByAuthor(2);
// async function testCreatePost() {
//   let myPost =
//     await Communicator.createPost("my title", "my post body", 33);
//   return myPost;
// }
// testCreatePost().then((post) => console.log(post));

// async function testGetAuthorInfo() {
//   let author = await Communicator.getAuthor(1);
//   console.log(author);
//   return author;
// }

// testGetAuthorInfo();


